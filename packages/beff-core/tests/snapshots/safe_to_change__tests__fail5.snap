---
source: packages/beff-core/tests/safe_to_change.rs
expression: "format!(\"//from\\n{}\\n//to\\n{}\\n{:#?}\", from, to, & errors)"
---
//from

        export default {
            "/hello": {
                get: (): {p:"a"|"b"} => todo()
            }
        }
        
//to

        export default {
            "/hello": {
                get: (): {p:"a"|"b"|"c"} => todo()
            }
        }
        
[
    OpenApiBreakingChange {
        change: ResponseBodyBreakingChange(
            IsNotSubtype {
                sub_type: Object(
                    {
                        "p": Required(
                            AnyOf(
                                {
                                    Const(
                                        String(
                                            "a",
                                        ),
                                    ),
                                    Const(
                                        String(
                                            "b",
                                        ),
                                    ),
                                    Const(
                                        String(
                                            "c",
                                        ),
                                    ),
                                },
                            ),
                        ),
                    },
                ),
                super_type: Object(
                    {
                        "p": Required(
                            AnyOf(
                                {
                                    Const(
                                        String(
                                            "a",
                                        ),
                                    ),
                                    Const(
                                        String(
                                            "b",
                                        ),
                                    ),
                                },
                            ),
                        ),
                    },
                ),
                sub_type_mater: Object(
                    {
                        "p": StringLiteral(
                            "a",
                        ),
                    },
                ),
                super_type_mater: Object(
                    {
                        "p": StringLiteral(
                            "a",
                        ),
                    },
                ),
                diff: Object(
                    {
                        "p": StringLiteral(
                            "c",
                        ),
                    },
                ),
            },
        ),
        path: "/hello",
        method: Some(
            Get,
        ),
    },
]
