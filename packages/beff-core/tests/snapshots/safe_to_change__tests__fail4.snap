---
source: packages/beff-core/tests/safe_to_change.rs
expression: "format!(\"//from\\n{}\\n//to\\n{}\\n{:#?}\", from, to, & errors)"
---
//from

        export default {
            "/hello": {
                get: (): ["a"|"b"] => todo()
            }
        }
        
//to

        export default {
            "/hello": {
                get: (): ["a"|"b"|"c"] => todo()
            }
        }
        
[
    OpenApiBreakingChange {
        change: ResponseBodyBreakingChange(
            IsNotSubtype {
                sub_type: Tuple {
                    prefix_items: [
                        AnyOf(
                            {
                                Const(
                                    String(
                                        "a",
                                    ),
                                ),
                                Const(
                                    String(
                                        "b",
                                    ),
                                ),
                                Const(
                                    String(
                                        "c",
                                    ),
                                ),
                            },
                        ),
                    ],
                    items: None,
                },
                super_type: Tuple {
                    prefix_items: [
                        AnyOf(
                            {
                                Const(
                                    String(
                                        "a",
                                    ),
                                ),
                                Const(
                                    String(
                                        "b",
                                    ),
                                ),
                            },
                        ),
                    ],
                    items: None,
                },
                sub_type_mater: Array {
                    items: Never,
                    prefix_items: [
                        StringLiteral(
                            "a",
                        ),
                    ],
                },
                super_type_mater: Array {
                    items: Never,
                    prefix_items: [
                        StringLiteral(
                            "a",
                        ),
                    ],
                },
                diff: Array {
                    items: Never,
                    prefix_items: [
                        StringLiteral(
                            "c",
                        ),
                    ],
                },
            },
        ),
        path: "/hello",
        method: Some(
            Get,
        ),
    },
]
